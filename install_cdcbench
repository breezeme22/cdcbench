#!/usr/bin/env python3

import ctypes
import os
import platform
import subprocess
import shutil
import sys


def get_selection(print_text):
    user_input = input(print_text)

    if len(user_input) == 0 or user_input is None:
        user_input = "Y"

    user_input = user_input.strip().upper()

    if user_input == "Y":
        return True
    elif user_input == "N":
        return False
    else:
        return None


def print_error_msg(err):
    print()
    print("This program was terminated by force for the following reasons: ")
    print(f"  {err}")
    exit(1)


def is_admin():
    """
    Checks whether current program has administrative privileges in OS
    Works with Windows XP SP2+ and most Unixes

    :return: Boolean, True if admin privileges present
    """
    current_os_name = os.name

    # Works with XP SP2 +
    if current_os_name == 'nt':
        try:
            return ctypes.windll.shell32.IsUserAnAdmin()
        except Exception:
            raise EnvironmentError('Cannot check admin privileges')
    elif current_os_name == 'posix':
        # Check for root on Posix
        return os.getuid() == 0
    else:
        raise EnvironmentError('OS does not seem to be supported for admin check. OS: %s' % current_os_name)


print()

while True:
    select = get_selection("Install the required library for CDCBENCH. Do you want to proceed? [Y|n]: ")

    if select is True:
        print()

        if platform.system() == "Windows":

            print("  > Install pip Library \n")
            print("Run Command: pip install -r requirements.txt \n")
            subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
            print()

            print("  > Install CUBRID Python Driver \n")

            site_package_path = None
            for path in sys.path:
                if "site-packages" in path.lower():
                    site_package_path = path
                    break

            if site_package_path is None:
                print_error_msg("Not found site-packages path")

            driver_path = os.path.join(os.path.abspath(os.path.curdir), "driver")
            cubrid_driver_path = os.path.join(driver_path, "cubrid")
            print(f"Move \"{cubrid_driver_path}{os.path.sep}*\" To \"{site_package_path}\"")
            try:
                shutil.copy(os.path.join(cubrid_driver_path, "_cubrid.cp36-win_amd64.pyd"), site_package_path)
                shutil.copytree(os.path.join(cubrid_driver_path, "CUBRIDdb"),
                                os.path.join(site_package_path, "CUBRIDdb"))
                print("Successfully installed CUBRID Driver")
            except FileExistsError:
                print("CUBRID Driver is already installed")

            print()

            print("  > Install TIBERO 6 ODBC Driver \n")

            tibero_driver_path = os.path.join(driver_path, "tibero6", "windows")
            tibero_driver_exe_path = os.path.join(tibero_driver_path, "bin")
            tibero_driver_exe = os.listdir(tibero_driver_exe_path)[0]
            tibero_driver_exe_abs_path = os.path.join(tibero_driver_exe_path, tibero_driver_exe)
            tibero_driver_lib_path = os.path.join(tibero_driver_path, "lib")
            tibero_driver_install_command = f"{tibero_driver_exe_abs_path} -i {tibero_driver_lib_path}"
            print(f"Run Command: {tibero_driver_install_command}")
            print("  * Note. This operation requires administrator privileges.\n")
            if is_admin():
                subprocess.check_call(
                    [tibero_driver_exe_abs_path, "-i", tibero_driver_lib_path]
                )
            else:
                ctypes.windll.shell32.ShellExecuteW(None, "runas", tibero_driver_exe_abs_path, f"-i {tibero_driver_lib_path}", None, 1)
                print(f"TiberoODBC Driver is being installed to [ {tibero_driver_lib_path} ] \n"
                      f"<Caution!!> If you changed the driver path, you should remove all Tibero DSNs and add them again.\n"
                      f"\n"
                      f"Success to INSTALL Tibero 6 ODBC Driver")

            print()
            break

        elif platform.system() == "Linux":

            break

        else:
            print_error_msg("This platform is not support installation.")

    elif select is False:
        print("\nwarning: operation is canceled by user\n")
        break

    else:
        print("\nwarning: operation is canceled by user\n")
