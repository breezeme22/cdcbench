#!/usr/bin/env python3

import os
import argparse
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))


from commons.constants import *
from commons.funcs_common import get_true_option, get_cdcbench_version, get_except_msg, CustomHelpFormatter
from commons.funcs_datatype import DataTypeFunctions
from commons.mgr_config import ConfigManager
from commons.mgr_logger import LoggerManager

from sqlalchemy.exc import DatabaseError
from json import JSONDecodeError

# Working Directory를 cdcbench로 변경
os.chdir(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

# CLI argument parsing
help_formatter = lambda prog: CustomHelpFormatter(prog, max_help_position=18)

parser = argparse.ArgumentParser(prog="typebench", usage="%(prog)s [option...][argument...]", allow_abbrev=False,
                                 formatter_class=help_formatter)

type_groups = parser.add_mutually_exclusive_group()
dml_groups = parser.add_mutually_exclusive_group()

type_groups.add_argument("-S", "--string", action="store_true",
                         help="specifies table to {}.".format(STRING_TEST))

type_groups.add_argument("-N", "--numeric", action="store_true",
                         help="specifies table to {}.".format(NUMERIC_TEST))

type_groups.add_argument("-D", "--datetime", action="store_true",
                         help="specifies table to {}.".format(DATETIME_TEST))

type_groups.add_argument("-B", "--binary", action="store_true",
                         help="specifies table to {}.".format(BINARY_TEST))

type_groups.add_argument("-L", "--lob", action="store_true",
                         help="specifies table to {}.".format(LOB_TEST))

type_groups.add_argument("-O", "--oracle", action="store_true",
                         help="specifies table to {}.".format(ORACLE_TEST))

type_groups.add_argument("-Q", "--sqlserver", action="store_true",
                         help="specifies table to {}.".format(SQLSERVER_TEST))

dml_groups.add_argument("-i", "--insert", action="store", metavar="<number of data>", type=int,
                        help="insert data in the specified table.")

parser.add_argument("-c", "--commit", action="store", metavar="<commit units>", type=int,
                    help="specifies the commit unit. (-i/--insert is required)")

dml_groups.add_argument("-u", "--update", action="store", nargs=2, metavar=("<start t_id>", "<end t_id>"),
                        type=int, help="update data in the specified table.")

dml_groups.add_argument("-d", "--delete", action="store", nargs=2, metavar=("<start t_id>", "<end t_id>"),
                        type=int, help="delete data in the specified table.")

parser.add_argument("-f", "--config", action="store", nargs="?", metavar="file_name", const="default.ini",
                    help="view or select configuration file.")

parser.add_argument("-v", "--version", action="version", version=get_cdcbench_version(),
                    help="print CDCBENCH\'s version.")

args = parser.parse_args()

# 아무 옵션도 없을 경우 예외처리
if args.config is None \
        and not args.string and not args.numeric and not args.datetime and not args.binary \
        and not args.lob and not args.oracle and not args.sqlserver \
        and args.insert is None and args.commit is None and args.update is None and args.delete is None:
    parser.print_help()
    parser.exit(1)

# --string, --numeric, --date, --binary, --lob 이 --insert, --delete 없이 사용될 때
elif (args.string or args.numeric or args.datetime or args.binary or args.lob or args.oracle or args.sqlserver) and \
   (not args.insert and not args.update and not args.delete):
    true_opt = get_true_option(args.__dict__)
    parser.error("--{} is required --insert or --update or --delete".format(true_opt))

# --insert, --delete 가 --string, --numeric, --datetime, --binary, --lob 없이 사용될 때
elif (not args.string and not args.numeric and not args.datetime and not args.binary and not args.lob and
      not args.oracle and not args.sqlserver) and \
     (args.insert or args.update or args.delete):
    true_opt = get_true_option(args.__dict__)
    parser.error("--{} is required --string or --numeric or --datetime or --binary or --lob".format(true_opt))

# --insert 옵션 없이 --commit 옵션을 사용한 경우 예외처리
elif args.insert is None and args.commit is not None:
    parser.error("--commit is required --insert")

config = None
logger = None
sql_logger = None

try:

    if args.config is None:
        config = ConfigManager()
    else:
        config = ConfigManager(args.config)

    logger = LoggerManager.get_logger(__name__, config.log_level)
    sql_logger = LoggerManager.get_sql_logger(config.sql_log_level)

    logger.info("Module {} is started".format(__file__))

    # -f/--config 옵션을 제외한 다른 옵션이 없을 경우 해당 Config 내용을 출력
    if not args.string and not args.numeric and not args.datetime and not args.binary and not args.lob and \
        not args.oracle and not args.sqlserver \
            and not args.insert and not args.update and not args.delete:
        config.view_config()
        logger.info("Load configuration file ({})".format(config.config_name))
        logger.info(config.get_config_dict())

        parser.exit(1)

    logger.info("Load configuration file ({})".format(config.config_name))
    logger.info(config.get_config_dict())

    datatype_functions = DataTypeFunctions()
    val_err_msg = "value of start t_id is greater than value of end t_id"

    # 각 DBMS별 고유 데이터 타입이 포함된 테이블인 경우 source_dbms_type 값 체크
    if args.oracle is True and (config.source_dbms_type != dialect_driver[ORACLE]):
        parser.error("Source DBMS is not Oracle.")
    elif args.sqlserver is True and (config.source_dbms_type != dialect_driver[SQLSERVER]):
        parser.error("Source DBMS is not SQL Server.")

    datatype_flags = {"string": args.string, "numeric": args.numeric, "datetime": args.datetime, "binary": args.binary,
                      "lob": args.lob, "oracle": args.oracle, "sqlserver": args.sqlserver}

    selected_category = None

    for category in datatype_flags.keys():
        if datatype_flags[category] is True:
            selected_category = category
            break

    selected_table = "{}_TEST".format(selected_category.upper())

    if args.insert:

        if args.commit:
            commit_unit = args.commit
        else:
            commit_unit = 100

        datatype_functions.dtype_insert(selected_table, args.insert, commit_unit)

    elif args.update:

        start_val = args.update[0]
        end_val = args.update[1]

        if start_val <= end_val:
            datatype_functions.dtype_update(selected_table, start_val, end_val)
        else:
            parser.error(val_err_msg)

    elif args.delete:

        start_val = args.delete[0]
        end_val = args.delete[1]

        if start_val <= end_val:
            datatype_functions.dtype_delete(selected_table, start_val, end_val)
        else:
            parser.error(val_err_msg)

except FileNotFoundError as ferr:
    get_except_msg(ferr)
    exit(1)

except KeyError as kerr:
    get_except_msg("Configuration Parameter does not existed: {}".format(kerr))
    exit(1)

except DatabaseError as dberr:
    get_except_msg(dberr.args[0])
    exit(1)

except JSONDecodeError as jerr:
    get_except_msg("Invalid JSON format of data file. line {} column {} (position {})"
                   .format(jerr.lineno, jerr.colno, jerr.pos))

except ValueError as valerr:
    get_except_msg(valerr)
    exit(1)

except UnicodeEncodeError as unierr:
    get_except_msg(unierr)
    print("  * Note. The LOB test file with string must be UTF-8 (without BOM) encoding.\n")
    exit(1)

except KeyboardInterrupt:
    print("\n{}: warning: operation is canceled by user".format(__file__))
    exit(1)

finally:
    if logger is not None:
        logger.info("Module {} is ended\n".format(__file__))

    if sql_logger is not None:
        sql_logger.info("\n")
