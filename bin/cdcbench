#!/usr/bin/env python3

import os
import argparse
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

from src.constants import *
from src.funcs_common import get_cdcbench_version, get_except_msg, CustomHelpFormatter, get_true_option, \
    view_config_file
from src.funcs_cdcbench import FuncsCdcbench
from src.mgr_config import ConfigManager
from src.mgr_connection import ConnectionManager
from src.mgr_logger import LoggerManager
from src.mgr_mappers import MapperManager

from sqlalchemy.exc import DatabaseError
from json import JSONDecodeError

# Working Directory를 cdcbench로 변경
os.chdir(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

# CLI argument parsing
help_formatter = lambda prog: CustomHelpFormatter(prog, max_help_position=18)

parser = argparse.ArgumentParser(prog="cdcbench", usage="%(prog)s [option...][argument...]", allow_abbrev=False,
                                 formatter_class=help_formatter)

dml = parser.add_mutually_exclusive_group()

dml.add_argument("-i", "--insert", action="store", metavar="<number of data>", type=int,
                 help="insert data in INSERT_TEST table.")

parser.add_argument("-c", "--commit", action="store", metavar="<commit units>", type=int,
                    help="specifies the commit unit. (-i/--insert is required)")

parser.add_argument("-s", "--single", action="store_true",
                    help="change to single insert. (-i/--insert is required)")

dml.add_argument("-u", "--update", action="store", nargs=2, metavar=("<start separate_col>", "<end separate_col>"),
                 type=int, help="update data in UPDATE_TEST table.")

dml.add_argument("-d", "--delete", action="store", nargs=2, metavar=("<start separate_col>", "<end separate_col>"),
                 type=int, help="delete data in DELETE_TEST table.")

parser.add_argument("-r", "--rollback", action="store_true", help="rollback the entered data.")

parser.add_argument("-f", "--config", action="store", nargs="?", metavar="Configuration File", const="default.ini",
                    help="view or specify configuration file.")

parser.add_argument("-v", "--verbose", action="store_false",
                    help="display the progress of the operation.")

parser.add_argument("-V", "--version", action="version", version=get_cdcbench_version(),
                    help="print CDCBENCH\'s version.")

args = parser.parse_args()

# 아무 옵션도 없을 경우 예외처리
if args.config is None \
    and args.insert is None and args.commit is None and not args.single \
        and args.update is None and args.delete is None \
        and not args.rollback:
    parser.print_help()
    parser.exit(1)

# --commit, --single 옵션이 --insert 옵션 없이 실행될 경우
elif args.insert is None and (args.commit is not None or args.single):
    true_opt = get_true_option(args.__dict__)
    parser.error("--{} option is required --insert option".format(true_opt))

config = None
logger = None
sql_logger = None

try:

    if args.config is None:
        config = ConfigManager()
    else:
        config = ConfigManager(args.config)

    # Log Level 설정 및 Logger 획득
    LoggerManager.set_log_level(config.log_level)
    logger = LoggerManager.get_logger(__file__)

    # SQL Log Level 설정 및 Logger 획득
    LoggerManager.set_sql_log_level(config.sql_log_level)
    sql_logger = LoggerManager.get_sql_logger()

    logger.info("Module {} is started".format(__file__))

    # --config 옵션을 제외한 다른 옵션이 없을 경우 해당 Config 내용을 출력
    if args.insert is None and args.commit is None and not args.single \
            and args.update is None and args.delete is None:
        print(view_config_file(config.get_config_dict()))
        logger.info("Load configuration file ({})".format(config.config_name))
        logger.info(config.get_config_dict())

        exit(1)

    logger.info("Load configuration file ({})".format(config.config_name))
    logger.info(config.get_config_dict())

    val_err_msg = "value of start separate_col is greater than value of end separate_col"

    # Connection Instance 생성
    conn = ConnectionManager(config.get_src_conn_info())

    # insert execution
    if args.insert:

        # Mapper Instance 생성
        mapper = MapperManager(conn, INSERT_TEST)

        # Functions Instance 생성
        cdcbench = FuncsCdcbench(conn, mapper)

        if args.commit:
            commit_unit = args.commit
        else:
            commit_unit = 1000

        if args.single:
            cdcbench.single_insert(args.insert, commit_unit, args.rollback, args.verbose)
        else:
            cdcbench.multi_insert(args.insert, commit_unit, args.rollback, args.verbose)

    # update execution
    elif args.update:

        # Mapper Instance 생성
        mapper = MapperManager(conn, UPDATE_TEST)

        # Functions Instance 생성
        cdcbench = FuncsCdcbench(conn, mapper)

        start_val = args.update[0]
        end_val = args.update[1]

        if start_val <= end_val:
            cdcbench.update(start_val, end_val, args.rollback, args.verbose)
        else:
            parser.error(val_err_msg)

    # delete execution
    elif args.delete:

        # Mapper Instance 생성
        mapper = MapperManager(conn, DELETE_TEST)

        # Functions Instance 생성
        cdcbench = FuncsCdcbench(conn, mapper)

        start_val = args.delete[0]
        end_val = args.delete[1]

        if start_val <= end_val:
            cdcbench.delete(start_val, end_val, args.rollback, args.verbose)
        else:
            parser.error(val_err_msg)

except FileNotFoundError as ferr:
    get_except_msg(ferr)
    exit(1)

except KeyError as kerr:
    get_except_msg("Configuration Parameter does not existed: {}".format(kerr))
    exit(1)

except DatabaseError as dberr:
    get_except_msg(dberr.args[0])
    exit(1)

except JSONDecodeError as jerr:
    get_except_msg("Invalid JSON format of data file. line {} column {} (position {})"
                   .format(jerr.lineno, jerr.colno, jerr.pos))

except ValueError as valerr:
    get_except_msg(valerr)
    exit(1)

except KeyboardInterrupt:
    print("\n{}: warning: operation is canceled by user".format(__file__))
    exit(1)

finally:
    if logger is not None:
        logger.info("Module {} is ended\n".format(__file__))

    if sql_logger is not None:
        sql_logger.info("\n")
