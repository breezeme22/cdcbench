#!/usr/bin/env python3

import os
import argparse
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

from commons.funcs_common import get_cdcbench_version, get_except_msg, CustomHelpFormatter
from commons.funcs_dml import DmlFunctions
from commons.mgr_config import ConfigManager
from commons.mgr_logger import LoggerManager

from sqlalchemy.exc import DatabaseError
from json import JSONDecodeError

# Working Directory를 cdcbench로 변경
os.chdir(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

# CLI argument parsing
help_formatter = lambda prog: CustomHelpFormatter(prog, max_help_position=18)

parser = argparse.ArgumentParser(prog="cdcbench", usage="%(prog)s [option...][argument...]", allow_abbrev=False,
                                 formatter_class=help_formatter)

groups = parser.add_mutually_exclusive_group()

groups.add_argument("-i", "--insert", action="store", metavar="<number of data>", type=int,
                    help="insert data in INSERT_TEST table.")

parser.add_argument("-c", "--commit", action="store", metavar="<commit units>", type=int,
                    help="specifies the commit unit. (-i/--insert is required)")

parser.add_argument("-s", "--single", action="store_true",
                    help="change to single insert. (-i/--insert is required)")

groups.add_argument("-u", "--update", action="store", nargs=2, metavar=("<start separate_col>", "<end separate_col>"),
                    type=int, help="update data in UPDATE_TEST table.")

groups.add_argument("-d", "--delete", action="store", nargs=2, metavar=("<start separate_col>", "<end separate_col>"),
                    type=int, help="delete data in DELETE_TEST table.")

parser.add_argument("-f", "--config", action="store", nargs="?", metavar="file name", const="default.ini",
                    help="view or specify configuration file.")

groups.add_argument("-v", "--version", action="version", version=get_cdcbench_version(),
                    help="print CDCBENCH\'s version.")

args = parser.parse_args()

# --commit, --single 옵션이 --insert 옵션 없이 실행될 경우
if args.insert is None and (args.commit is not None or args.single):
    # parser.error("-c/--commit or -s/--single is required -i/--insert")
    parser.error("--commit(-c) or --single(-s) is required --insert(-i)")

config = None
logger = None
sql_logger = None

try:
    # config 옵션 존재 유무에 따라 Config 객체 생성 분리
    # config 옵션 있음
    if args.config:

        config = ConfigManager(args.config)
        logger = LoggerManager.get_logger(__name__, config.log_level)

        logger.info("Module {} is started".format(__file__))

        # -f/--config 옵션을 제외한 다른 옵션이 없을 경우 해당 Config 내용을 출력
        if args.insert is None and args.commit is None and not args.single and \
           args.update is None and args.delete is None:
            config.view_config()
            logger.info("Load configuration file ({})".format(config.config_name))
            logger.info(config.get_config_dict())

            exit(1)

    # config 옵션 없음
    elif (args.config is None) and (args.insert is not None or args.update is not None or args.delete is not None):

        config = ConfigManager()
        logger = LoggerManager.get_logger(__name__, config.log_level)

        logger.info("Module {} is started".format(__file__))

    # 아무 옵션도 없을 경우
    else:
        parser.print_help()
        parser.exit(1)

    sql_logger = LoggerManager.get_sql_logger(config.sql_log_level)

    logger.info("Load configuration file ({})".format(config.config_name))
    logger.info(config.get_config_dict())

    dml_functions = DmlFunctions()
    val_err_msg = "value of start separate_col is greater than value of end separate_col"

    # insert execution
    if args.insert:

        if args.commit:
            commit_unit = args.commit
        else:
            commit_unit = 1000

        if args.single:
            dml_functions.insert_orm(args.insert, commit_unit)
        else:
            dml_functions.insert_core(args.insert, commit_unit)

    # update execution
    elif args.update:

        start_val = args.update[0]
        end_val = args.update[1]

        if start_val <= end_val:
            dml_functions.update_core(start_val, end_val)
        else:
            parser.error(val_err_msg)

    # delete execution
    elif args.delete:

        start_val = args.delete[0]
        end_val = args.delete[1]

        if start_val <= end_val:
            dml_functions.delete_core(start_val, end_val)
        else:
            parser.error(val_err_msg)

except FileNotFoundError as ferr:
    get_except_msg(ferr)
    exit(1)

except KeyError as kerr:
    get_except_msg("Configuration Parameter does not existed: {}".format(kerr))
    exit(1)

except DatabaseError as dberr:
    get_except_msg(dberr.args[0])
    exit(1)

except JSONDecodeError as jerr:
    get_except_msg("Invalid JSON format of data file. line {} column {} (position {})"
                   .format(jerr.lineno, jerr.colno, jerr.pos))

except ValueError as valerr:
    get_except_msg(valerr)
    exit(1)

except KeyboardInterrupt:
    print("\n{}: warning: operation is canceled by user".format(__file__))
    exit(1)

finally:
    if logger is not None:
        logger.info("Module {} is ended\n".format(__file__))

    if sql_logger is not None:
        sql_logger.info("\n")
