#!/usr/bin/env python3

import os
import argparse
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

from commons.constants import *
from commons.funcs_common import get_cdcbench_version, get_except_msg, CustomHelpFormatter
from commons.funcs_verify import VerifyFunctions
from commons.mgr_config import ConfigManager
from commons.mgr_logger import LoggerManager

from sqlalchemy.exc import DatabaseError

# Working Directory를 cdcbench로 변경
os.chdir(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

if __name__ == "__main__":
    print("This feature is not currently available.")
    exit(1)

# CLI argument parsing
help_formatter = lambda prog: CustomHelpFormatter(prog, max_help_position=18)

parser = argparse.ArgumentParser(prog=".datachecker", usage="%(prog)s [option...][argument...]", allow_abbrev=False,
                                 formatter_class=help_formatter)

groups = parser.add_mutually_exclusive_group()

groups.add_argument("-S", "--string", action="store_true",
                    help="specifies table to {}.".format(STRING_TEST))

groups.add_argument("-N", "--numeric", action="store_true",
                    help="specifies table to {}.".format(NUMERIC_TEST))

groups.add_argument("-D", "--datetime", action="store_true",
                    help="specifies table to {}.".format(DATETIME_TEST))

groups.add_argument("-B", "--binary", action="store_true",
                    help="specifies table to {}.".format(BINARY_TEST))

groups.add_argument("-L", "--lob", action="store_true",
                    help="specifies table to {}.".format(LOB_TEST))

groups.add_argument("-O", "--oracle", action="store_true",
                    help="specifies table to {}.".format(ORACLE_TEST))

groups.add_argument("-Q", "--sqlserver", action="store_true",
                    help="specifies table to {}.".format(SQLSERVER_TEST))

parser.add_argument("-f", "--config", action="store", nargs="?", metavar="file name", const="default.ini",
                    help="view or select configuration file.")

parser.add_argument("-v", "--version", action="version", version=get_cdcbench_version(),
                    help="print CDCBENCH\'s version.")

args = parser.parse_args()

config = None
logger = None
sql_logger = None

try:
    # config 옵션 존재 유무에 따라 Config 객체 생성 분리
    # config 옵션 있음
    if args.config:

        config = ConfigManager(args.config)
        logger = LoggerManager.get_logger(__name__, config.log_level)

        logger.info("Module {} is started".format(__file__))

        # -f/--config 옵션을 제외한 다른 옵션이 없을 경우 해당 Config 내용을 출력
        if not args.string and not args.numeric and not args.datetime and not args.binary and not args.lob and \
           not args.oracle and not args.sqlserver:
            config.view_config()
            logger.info("Load configuration file ({})".format(config.config_name))
            logger.info(config.get_config_dict())

            exit(1)

    # config 옵션 없음
    elif (args.config is None) and (args.string or args.numeric or args.datetime or args.binary or args.lob or
                                    args.oracle or args.sqlserver):

        config = ConfigManager()
        logger = LoggerManager.get_logger(__name__, config.log_level)

        logger.info("Module {} is started".format(__file__))

    # 아무 옵션도 없을 경우
    else:
        parser.print_help()
        parser.exit(1)

    sql_logger = LoggerManager.get_sql_logger(config.sql_log_level)

    logger.info("Load configuration file ({})".format(config.config_name))
    logger.info(config.get_config_dict())

    verify_functions = VerifyFunctions()

    # string execution
    if args.string:
        verify_functions.data_verify(STRING_TEST)

    # numeric execution
    elif args.numeric:
        verify_functions.data_verify(NUMERIC_TEST)

    # date execution
    elif args.datetime:
        verify_functions.data_verify(DATETIME_TEST)

    # binary execution
    elif args.binary:
        verify_functions.data_verify(BINARY_TEST)

    # lob execution
    elif args.lob:
        verify_functions.data_verify(LOB_TEST)

    # oracle execution
    elif args.oracle:

        if config.source_dbms_type == dialect_driver[ORACLE] and config.target_dbms_type == dialect_driver[ORACLE]:
            verify_functions.data_verify(ORACLE_TEST)
        else:
            parser.error("Source/Target DBMS is not Oracle.")

    # sqlserver execution
    elif args.sqlserver:
        if config.source_dbms_type == dialect_driver[SQLSERVER] and config.target_dbms_type == dialect_driver[SQLSERVER]:
            verify_functions.data_verify(SQLSERVER_TEST)
        else:
            parser.error("Source/Target DBMS is not SQL Server.")

except FileNotFoundError as ferr:
    get_except_msg(ferr)
    exit(1)

except KeyError as kerr:
    get_except_msg("Configuration Parameter does not existed: {}".format(kerr))
    exit(1)

except DatabaseError as dberr:
    get_except_msg(dberr.args[0])
    exit(1)

except ValueError as valerr:
    get_except_msg(valerr)
    exit(1)

except KeyboardInterrupt:
    print("\n{}: warning: operation is canceled by user".format(__file__))
    exit(1)

finally:
    if logger is not None:
        logger.info("Module {} is ended\n".format(__file__))

    if sql_logger is not None:
        sql_logger.info("\n")
