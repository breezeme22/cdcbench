#!/usr/bin/env python3

import argparse
import json
import os
import sys
import time

from typing import NoReturn

sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

from lib.globals import *
from lib.common import (CustomHelpFormatter, view_runtime_config, view_config_file, get_exist_option,
                        get_elapsed_time_msg, get_version, print_error)
from lib.funcs_initializer import InitbenchFunctions
from lib.config import ConfigManager
from lib.connection import ConnectionManager
from lib.logger import LoggerManager
from lib.definition import SADeclarativeManager


def initializer_cli() -> NoReturn:

    # Working Directory를 ~/cdcbench로 변경
    os.chdir(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

    parser = argparse.ArgumentParser(prog="initbench", allow_abbrev=False,
                                     add_help=False, argument_default=argparse.SUPPRESS,
                                     formatter_class=CustomHelpFormatter)

    command = parser.add_argument_group(title="Command")
    command_args = ["create", "drop", "reset"]

    command_mxg = command.add_mutually_exclusive_group()
    command_mxg.add_argument("--create", "-c", action="store_true",
                             help="Creates objects and initial data.")

    command_mxg.add_argument("--drop", "-d", action="store_true",
                             help="Drops objects.")

    command_mxg.add_argument("--reset", "-r", action="store_true",
                             help="Re-create objects and initial data.")

    database_opts = parser.add_argument_group(title="Database option")

    def check_database_opts(item: str):
        if item:
            tmp_item: list or str = None
            if item != ",":
                tmp_item = item.strip(",").upper()

            return tmp_item
        else:
            parser.error(f"--destination option value [ {item} ] is invalid syntax")

    database_opts.add_argument("--database", "-db", action="store", nargs="+", metavar="<DB key name>",
                               type=check_database_opts,
                               help="Specifies command destination")

    table_key_opts = parser.add_argument_group(title="Table key options")
    table_key_args = ["primary_key", "unique", "non_key"]

    table_keys_mxg = table_key_opts.add_mutually_exclusive_group()

    table_keys_mxg.add_argument("--primary-key", "-p", action="store_true",
                                help="The key is designated as the primary key when creating the table.")

    table_keys_mxg.add_argument("--unique", "-u", action="store_true",
                                help="The key is designated as the unique key when creating the table.")

    table_keys_mxg.add_argument("--non-key", "-n", action="store_true",
                                help="The key is not generated when the table is created.")

    command_sub_opts = parser.add_argument_group(title="Command Sub-options")
    command_sub_opts_args = ["without_data", "only_data", "assumeyes", "verbose"]

    command_sub_opts_mxg = command_sub_opts.add_mutually_exclusive_group()
    command_sub_opts_mxg.add_argument("--without-data", "-w", action="store_true",
                                      help="Creates only table structures without generate initial data.")

    command_sub_opts_mxg.add_argument("--only-data", "-o", action="store_true",
                                      help="Creates initial data without recreate table structures.")

    command_sub_opts.add_argument("--assumeyes", "-y", action="store_true",
                                  help="Answers yes for question.")

    command_sub_opts.add_argument("--verbose", "-v", action="store_false",
                                  help="Displays the progress of the operation.")

    other_opts = parser.add_argument_group(title="Other options")

    other_opts.add_argument("--config", "-f", action="store", nargs="?", metavar="Configuration File",
                            default=None, help="Displays or specifies configuration file.")

    other_opts.add_argument("--version", "-V", action="version", version=get_version(),
                            help="Displays CDCBENCH version.")

    other_opts.add_argument("--help", "-h", action="help",
                            help="Displays CDCBENCH usage help.")

    args = parser.parse_args()

    # 아무 옵션도 없을 경우 예외처리
    if len(sys.argv) < 2:
        parser.print_help()
        parser.exit(1)

    # Destination option이 Command 없이 사용될 경우 예외처리
    elif hasattr(args, "database") and not any(hasattr(args, command) for command in command_args):
        parser.error(f"Database option is required Command")

    # Table key option이 Command 없이 사용될 경우 예외처리
    elif (any(hasattr(args, table_key) for table_key in table_key_args) and
          not any(hasattr(args, command) for command in command_args)):
        parser.error(f"Table key option is required Command")

    # Command Sub option이 Command 없이 사용될 경우 예외처리
    elif (any(hasattr(args, cmd_sub_opt) for cmd_sub_opt in command_sub_opts_args) and
          not any(hasattr(args, command) for command in command_args)):
        parser.error(f"Command Sub-option is required Command")

    # --without-data 옵션이 --create/--reset 옵션없이 사용될 경우 예외처리
    elif hasattr(args, "without_data") and not any(hasattr(args, command) for command in ["create", "reset"]):
        parser.error("--without-data option is required --create/--reset Command")

    # --only-data 옵션이 --create 옵션없이 사용될 경우 예외처리
    elif hasattr(args, "only_data") and not hasattr(args, "create"):
        parser.error("--without-data option is required --create Command")

    # Command parsing 유효성 검사 끝난 후 기본값 세팅
    if not hasattr(args, "verbose"):
        args.verbose = True

    if not any(hasattr(args, table_key) for table_key in table_key_args):
        args.primary_key = True

    try:

        config = ConfigManager(args.config).get_config()

        # --database option value check 및 값 설정
        if hasattr(args, "database"):
            db_key_names = set(config.databases.keys())
            set_database = set(d.upper() for d in args.database)
            database_opts_diff_db_key_names = set_database.difference(db_key_names)
            if "ALL" in args.database:
                args.database = list(config.databases.keys())
            elif len(database_opts_diff_db_key_names) >= 1:
                print_error(f"[ {', '.join(database_opts_diff_db_key_names)} ] is DB key name that does not exist.")
            else:
                pass
        else:
            args.destination = [list(config.databases.keys())[0]]

        logger = LoggerManager.get_logger(__file__)

        logger.info(f"Module {__file__} is started")

        print(view_runtime_config(config, args))

        # --config 옵션을 제외한 다른 옵션이 없을 경우 해당 Config 내용을 출력 후 종료
        if hasattr(args, "config") and not any(hasattr(args, cmd) for cmd in command_args):
            print(view_config_file(config))
            parser.exit(1)

        # DBMS 미지원 옵션 예외처리
        for d in args.database:
            if config.databases[d].dbms == MYSQL and hasattr(args, "non_key"):
                print_error("Non-key table is not supported in MySQL, MariaDB")
            elif (config.databases[d].dbms in sa_unsupported_dbms
                  and (hasattr(args, "create") or hasattr(args, "reset"))):
                print_error(f"For {config.databases[d].dbms}, only --without-data option is supported.")

        print(args)

        print(view_runtime_config(config, args))

        def get_continue_flag():

            selected_command = get_exist_option(args, command_args).lower()

            if hasattr(args, "assumeyes"):
                print("Y")
                return True

            user_input = input(
                f"Do you want to {selected_command} CDCBENCH related objects and data in the above databases [y/N]: ")

            if len(user_input) == 0 or user_input is None:
                user_input = "NO"

            user_input = user_input.strip().upper()

            if user_input == "Y":
                return True
            elif user_input == "N":
                return False
            else:
                return None

        while True:
            continue_flag = get_continue_flag()
            if continue_flag is True:
                print()
                break
            elif continue_flag is False:
                print(f"{__file__}: warning: operation is canceled by user")
                exit(1)
            else:
                print(f'{__file__}: warning: invalid value. please enter "Y" or "N".\n')

        initbench_functions = InitbenchFunctions(args, config)

        start_time = time.time()

        if hasattr(args, "create"):
            pass

        elif hasattr(args, "drop"):
            pass

        elif hasattr(args, "reset"):
            pass

        print(f"  {get_elapsed_time_msg(time.time(), start_time)}")

    except KeyboardInterrupt:
        print(f"\n{__file__}: warning: operation is canceled by user\n")
        exit(1)

    finally:
        print()


if __name__ == "__main__":
    initializer_cli()
