#!/usr/bin/env python3

import argparse
import json
import os
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

from lib.globals import *
from lib.common import CustomHelpFormatter, view_config_file, \
                             get_version, get_true_option, get_object_name, get_start_time_msg, \
                             print_error, print_complete_msg, \
                             proc_database_error, sa_unsupported_dbms_module_limit
from lib.data_backup import data_file_name, FuncsDataMaker
from lib.funcs_ranbench import FuncRanBench
from lib.mgr_config import ConfigManager
from lib.connection import ConnectionManager
from lib.logger import LoggerManager
from lib.definition import MapperManager

from datetime import datetime
from sqlalchemy.exc import DatabaseError

# Working Directory를 cdcbench로 변경
os.chdir(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

parser = argparse.ArgumentParser(prog="ranbench", usage="%(prog)s <Execution> <Range> [options...]", allow_abbrev=False,
                                 add_help=False, formatter_class=CustomHelpFormatter)

executions = parser.add_argument_group(title="Execution")
executions_mxg = executions.add_mutually_exclusive_group()

executions_mxg.add_argument("-C", "--total-record", action="store", metavar="<count of total record>", type=int,
                            help="Generates random DMLs by the total number of records")

executions_mxg.add_argument("-D", "--dml-count", action="store", metavar="<count of DML count>", type=int,
                            help="Generates random DMLs by the DML count")

executions_mxg.add_argument("-T", "--run-time", action="store", type=float, metavar="<Running Time (Second)>",
                            help="Generates random DMLs for a specified time")

range_opt = parser.add_argument_group(title="Range")

range_opt.add_argument("-n", "--range", action="store", nargs="+", metavar="count of record", type=int,
                       help="Specifies the range of the amount of records to enter per DML")

executions_sub_options = parser.add_argument_group(title="Execution Sub-option")

executions_sub_options.add_argument("-s", "--sleep", action="store", metavar="<Idle Time (Second)>", type=float,
                                    help="Specifies the idle time to occur per DML (Default. 0)")

executions_sub_options.add_argument("-t", "--tables", action="store", nargs="+", metavar="<Table Name>",
                                    type=lambda item: item.upper(),
                                    help="Specifies the table that will generate random DML \n"
                                         "(Default. STRING_TEST, NUMERIC_TEST, DATETIME_TEST, BINARY_TEST, LOB_TEST)")

executions_sub_options.add_argument("-d", "--dml", choices=["INSERT", "UPDATE", "DELETE"], nargs="+", metavar="<DML Type>",
                                    type=lambda s: s.upper(),
                                    help="Specifies the DML to occur (Default. INSERT, UPDATE, DELETE)")

executions_sub_options.add_argument("-r", "--rollback", action="store_true",
                                    help="Rollbacks the entered data.")

executions_sub_options.add_argument("-v", "--verbose", action="store_false",
                                    help="Displays the progress of the operation.")

others = parser.add_argument_group(title="Others")

others.add_argument("-f", "--config", action="store", nargs="?", metavar="Configuration File",
                    const=default_config_name,
                    help="Displays or specifies configuration file.")

others.add_argument("-V", "--version", action="version", version=get_version(),
                    help="Displays CDCBENCH version.")

others.add_argument("-h", "--help", action="help",
                    help="Displays CDCBENCH usage help.")

args = parser.parse_args()

# 아무 옵션도 없을 경우 예외처리
if args.total_record is None and args.dml_count is None and args.run_time is None \
   and args.range is None and args.sleep is None and args.tables is None and args.dml is None \
   and not args.rollback and args.config is None and args.verbose:
    parser.print_help()
    parser.exit(1)

# running_type_group 옵션이 --record-range 옵션 없이 사용될 경우 예외처리
elif (args.total_record is not None or args.dml_count is not None or args.run_time is not None) \
     and args.range is None:
    parser.error("--total-record/--run-time option is required --range option\n")

# 기타 선택 옵션이 Running Type Group 옵션없이 사용될 경우 예외처리
elif (args.range is not None or args.sleep is not None or args.tables is not None or args.dml is not None
      and not args.rollback) \
     and (args.total_record is None and args.dml_count is None and args.run_time is None):
    true_opt = get_true_option(args.__dict__)
    parser.error(f"--{true_opt} option is required --total-record/--dml-count/--run-time option\n")

# --verbose 옵션이 Running Type Group 옵션 없이 사용될 경우 예외처리
elif not args.verbose and (args.total_record is None and args.dml_count is None and args.run_time is None):
    parser.error("--verbose option is required --total-record/--run-time option\n")

# --record-range 옵션 인자 개수별 처리
if args.range is not None:
    if len(args.range) == 1:
        args.range = [args.range[0], args.range[0]]
    elif len(args.range) == 2:
        if args.range[0] <= args.range[1]:
            pass
        else:
            parser.error("--range option's second argument is less than first argument\n")
    else:
        parser.error("--range option's argument is allowed up to two argument\n")

config = None
logger = None
sql_logger = None

try:
    config = ConfigManager(args.config)

    # SA가 지원하지 않는 dbms의 경우 기능 제한
    sa_unsupported_dbms_module_limit(config.source_dbms_type)

    # Log Level 설정 및 Logger 획득
    LoggerManager.set_log_level(config.log_level)
    logger = LoggerManager.get_logger(__file__)

    # SQL Log Level 설정 및 Logger 획득
    LoggerManager.set_sql_log_level(config.sql_log_level)
    sql_logger = LoggerManager.get_sql_logger()

    logger.info(f"Module {__file__} is started")

    # --config 옵션을 제외한 다른 옵션이 없을 경우 해당 Config 내용을 출력
    if args.total_record is None and args.dml_count is None and args.run_time is None \
       and args.range is None and args.sleep is None and args.tables is None \
       and args.verbose:
        print(view_config_file(config.get_config()))
        logger.info(f"Load configuration file ({config.config_name})")
        logger.info(json.dumps(config.get_config(), indent=4))
        parser.exit(1)

    logger.info(f"Load configuration file ({config.config_name})")
    logger.info(json.dumps(config.get_config(), indent=4))

    conn = ConnectionManager(config.get_src_conn_info())  # Connection Instance 생성

    mapper = MapperManager(conn, args.tables).get_mappers()  # Mapper Instance 생성

    ranbench = FuncRanBench(conn)  # Functions Instance 생성

    # 미설정 옵션 기본값 세팅
    if args.sleep is None:
        args.sleep = 0

    tables = None
    sample_tables = [STRING_TEST, NUMERIC_TEST, DATETIME_TEST, BINARY_TEST, LOB_TEST]
    if args.tables is None:
        tables = [mapper.metadata.tables[get_object_name(table_name, mapper.metadata.tables.keys())]
                  for table_name in sample_tables]

    else:
        # --tables 옵션을 지정했을 경우 예약된 테이블이 아닌 경우 예외처리
        table_check = True
        for table_name in args.tables:
            if table_name in sample_tables:
                table_check = True
            else:
                table_check = False

        if table_check is False:
            print_error(f"Unsupported table name. The following tables are allowed: \n"
                            f"  {sample_tables}")

        try:
            tables = [mapper.metadata.tables[get_object_name(table_name, mapper.metadata.tables.keys())]
                      for table_name in args.tables]

        except KeyError as kerr:
            print_error(f"Table [ {kerr.args[0]} ] does not exist.")

    if args.dml is None:
        args.dml = ["INSERT", "UPDATE", "DELETE"]

    # UPDATE/DELETE가 단독으로 사용될 경우 무한 반복을 피하기 위해 시작 조건 체크
    if len(args.dml) == 1 and args.dml[0] in ["UPDATE", "DELETE"]:
        if args.total_record:
            total_row_count = 0
            for table in tables:
                total_row_count += ranbench.run_select_count(table.columns[table.columns.keys()[0]])
            if total_row_count < args.total_record:
                print_error(f"Tables do not have sufficient data to perform {args.dml[0]}.")

        elif args.dml_count:
            total_row_count = 0
            for table in tables:
                total_row_count += ranbench.run_select_count(table.columns[table.columns.keys()[0]])
            if total_row_count < args.dml_count * args.range[1]:
                print_error(f"Tables do not have sufficient data to perform {args.dml[0]}.")

        elif args.run_time:
            print_error("Only UPDATE or DELETE cannot be selected for the --run-time option. \n"
                            "  * Note. Please include INSERT.")

    now = datetime.now()
    print(get_start_time_msg(now))
    if args.verbose:
        print("  Generating Random DML for each table ", end="", flush=True)
    else:
        print("  Generating Random DML for each table ", flush=True)

    table_aliases = [table.name.split("_")[0].upper() for table in tables]
    data_makers = {table_alias: FuncsDataMaker(data_file_name[table_alias]) for table_alias in table_aliases}

    if args.total_record:
        result = ranbench.run_record_random(args.total_record, args.range, args.sleep, tables, args.dml, data_makers,
                                            args.rollback, now, args.verbose)
    elif args.dml_count:
        result = ranbench.run_dml_count_random(args.dml_count, args.range, args.sleep, tables, args.dml, data_makers,
                                               args.rollback, now, args.verbose)
    elif args.run_time:
        result = ranbench.run_time_random(args.run_time, args.range, args.sleep, tables, args.dml, data_makers,
                                          args.rollback, now, args.verbose)
    else:
        result = None

    print_complete_msg(args.rollback, args.verbose, end="\n", separate=True)

    print("  ::: Execution Result")
    print(f"  Total Record: {result['total_record']} | DML Count: {result['dml_count']} | {result['elapsed_time']}")
    for table_name in result["detail"]:
        table_result = result["detail"][table_name]
        print(f"    {table_name}: INSERT ({table_result['INSERT']}) / UPDATE ({table_result['UPDATE']}) / "
              f"DELETE ({table_result['DELETE']})")

except DatabaseError as dberr:
    proc_database_error(logger, config.log_level, dberr, fail_print=False)

except KeyboardInterrupt:
    print(f"\n{__file__}: warning: operation is canceled by user")
    exit(1)

finally:
    print()
    if logger is not None:
        logger.info(f"Module {__file__} is ended\n")

    if sql_logger is not None:
        sql_logger.info("\n")
