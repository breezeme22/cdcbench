#!/usr/bin/env python3

import argparse
import json
import os
import sys
import time
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

from commons.constants import *
from commons.funcs_common import CustomHelpFormatter, view_runtime_config, view_config_file, \
                             get_elapsed_time_msg, get_cdcbench_version, get_true_option, \
                             exec_database_error, print_error_msg
from commons.funcs_initializer import FuncsInitializer
from commons.mgr_config import ConfigManager
from commons.mgr_connection import ConnectionManager
from commons.mgr_logger import LoggerManager
from commons.mgr_mappers import MapperManager

from sqlalchemy.exc import DatabaseError

# Working Directory를 ~/cdcbench로 변경
os.chdir(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))

parser = argparse.ArgumentParser(prog="initializer", usage="%(prog)s <Execution> [options...]", allow_abbrev=False,
                                 add_help=False, formatter_class=CustomHelpFormatter)

executions = parser.add_argument_group(title="Execution")
executions_mxg = executions.add_mutually_exclusive_group()

executions_mxg.add_argument("-c", "--create", action="store_true",
                            help="Creates objects and initial data.")

executions_mxg.add_argument("-d", "--drop", action="store_true",
                            help="Drops objects.")

executions_mxg.add_argument("-r", "--reset", action="store_true",
                            help="Recreate objects and initial data.")

destinations = parser.add_argument_group(title="Destination")
destinations_mxg = destinations.add_mutually_exclusive_group()

destinations_mxg.add_argument("-s", "--source", action="store_true",
                              help="Specifies execution destination as the Source.")

destinations_mxg.add_argument("-t", "--target", action="store_true",
                              help="Specifies execution destination as the Target.")

destinations_mxg.add_argument("-b", "--both", action="store_true",
                              help="Specifies execution destination as the Source and Target.")

table_keys = parser.add_argument_group(title="Table key")
table_keys_mxg = table_keys.add_mutually_exclusive_group()

table_keys_mxg.add_argument("-p", "--primary", action="store_true",
                            help="The key is designated as the primary key when creating the table.")

table_keys_mxg.add_argument("-u", "--unique", action="store_true",
                            help="The key is designated as the primary key when creating the table.")

table_keys_mxg.add_argument("-n", "--non-key", action="store_true",
                            help="The key is not generated when the table is created.")

executions_sub_options = parser.add_argument_group(title="Execution sub-option")

executions_sub_options.add_argument("-w", "--without-data", action="store_true",
                                    help="Creates only table structures without initial data.")

executions_sub_options.add_argument("-o", "--only-data", action="store_true",
                                    help="Creates initial data without recreate table structures.")

executions_sub_options.add_argument("-y", "--assumeyes", action="store_true",
                                    help="Answers yes for question.")

executions_sub_options.add_argument("-v", "--verbose", action="store_false",
                                    help="Displays the progress of the operation.")

others = parser.add_argument_group(title="Others")

others.add_argument("-f", "--config", action="store", nargs="?", metavar="Configuration File",
                    const=default_config_name,
                    help="Displays or specifies configuration file.")

others.add_argument("-V", "--version", action="version", version=get_cdcbench_version(),
                    help="Displays CDCBENCH version.")

others.add_argument("-h", "--help", action="help",
                    help="Displays CDCBENCH usage help.")

args = parser.parse_args()

# 아무 옵션도 없을 경우 예외처리
if not args.create and not args.drop and not args.reset \
   and not args.source and not args.target and not args.both \
   and not args.primary and not args.unique and not args.non_key \
   and not args.without_data and not args.only_data \
   and not args.assumeyes and args.config is None and args.verbose:
    parser.print_help()
    parser.exit(1)

# Destination/Key Group 옵션이 Exec 옵션없이 사용될 경우 예외처리
elif ((args.source or args.target or args.both) or (args.primary or args.unique or args.non_key)) \
     and (not args.create and not args.drop and not args.reset):
    true_opt = get_true_option({"source": args.source, "target": args.target, "both": args.both,
                                "primary": args.primary, "unique": args.unique, "non-key": args.non_key})
    parser.error(f"--{true_opt} option is required --create/--drop/--reset option\n")

# --without-data 옵션이 --create/--reset 옵션없이 사용될 경우 예외처리
elif args.without_data and (not args.create and not args.reset):
    parser.error("--without-data option is required --create/--reset option\n")

# --only-data 옵션이 --create 옵션없이 사용될 경우 예외처리
elif args.only_data and not args.create:
    parser.error("--only-data option is required --create option\n")

# --verbose 옵션이 Exec Group 옵션없이 사용될 경우 예외처리
elif not args.verbose and (not args.create and not args.drop and not args.reset):
    parser.error("--verbose option is required --create/--drop/--reset option\n")

# --assumeyes 옵션이 Exec Group 옵션없이 사용될 경우 예외처리
elif args.assumeyes and (not args.create and not args.drop and not args.reset):
    parser.error("--assumeyes option is required --create/--drop/--reset option\n")

config = None
logger = None
sql_logger = None

try:

    config = ConfigManager(args.config)

    # Log Level 설정 및 Logger 획득
    LoggerManager.set_log_level(config.log_level)
    logger = LoggerManager.get_logger(__file__)

    # SQL Log Level 설정 및 Logger 획득
    LoggerManager.set_sql_log_level(config.sql_log_level)
    sql_logger = LoggerManager.get_sql_logger()

    logger.info(f"Module {__file__} is started")

    # --config 옵션을 제외한 다른 옵션이 없을 경우 해당 Config 내용을 출력 후 종료
    if not args.create and not args.drop and not args.reset \
       and not args.source and not args.target and not args.both \
       and not args.primary and not args.unique and not args.non_key \
       and not args.without_data and not args.only_data and not args.assumeyes and args.verbose:
        print(view_config_file(config.get_config()))
        logger.info(f"Load configuration file ({config.config_name})")
        logger.info(json.dumps(config.get_config(), indent=4))
        parser.exit(1)

    logger.info(f"Load configuration file ({config.config_name})")
    logger.info(json.dumps(config.get_config(), indent=4))

    def mysql_key_option_check(dest):
        """
        dbms_type이 MySQL일 경우 --non-key/--unique 옵션 예외처리
        :param dest: SOURCE or TARGET
        :return: None
        """
        if dest == SOURCE:
            if config.source_dbms_type == MYSQL and (args.non_key or args.unique):
                true_opt = get_true_option({"non-key": args.non_key, "unique": args.unique})
                print_error_msg(f"--{true_opt} option is not available for that DBMS (MySQL)\n")
        else:
            if config.target_dbms_type == MYSQL and (args.non_key or args.unique):
                true_opt = get_true_option({"non-key": args.non_key, "unique": args.unique})
                print_error_msg(f"--{true_opt} option is not available for that DBMS (MySQL)\n")

    def sa_unsupported_dbms_without_data_option_check(dest):
        """
        dbms_type이 SQLAlchemy 미지원 DBMS일 경우 --without-data 옵션만 지원
        :param dest: SOURCE or TARGET
        :return: None
        """
        if (args.create or args.reset) and not args.without_data:
            if dest == SOURCE and config.source_dbms_type in sa_unsupported_dbms:
                print_error_msg(f"For {config.source_dbms_type}, only --without-data option is supported.")
            elif dest == TARGET and config.target_dbms_type in sa_unsupported_dbms:
                print_error_msg(f"For {config.target_dbms_type}, only --without-data option is supported.")

    # destination별 처리
    if args.target:
        destination = TARGET

        mysql_key_option_check(destination)
        sa_unsupported_dbms_without_data_option_check(destination)

        # Connection instance 생성
        logger.debug("Create target connection instance")
        trg_conn = ConnectionManager(config.get_trg_conn_info())

        # Mapper instance 생성
        logger.debug("Create mapper instance")
        trg_mapper = MapperManager(trg_conn).get_mappers()

        # Function instance 생성
        initializer = FuncsInitializer(trg_conn=trg_conn, trg_mapper=trg_mapper)

        print(view_runtime_config(destination, config.get_config(), args))

    elif args.both:
        destination = BOTH

        mysql_key_option_check(SOURCE)
        mysql_key_option_check(TARGET)

        sa_unsupported_dbms_without_data_option_check(SOURCE)
        sa_unsupported_dbms_without_data_option_check(TARGET)

        # Connection instance 생성
        logger.debug("Create source connection instance")
        src_conn = ConnectionManager(config.get_src_conn_info())
        logger.debug("Create target connection instance")
        trg_conn = ConnectionManager(config.get_trg_conn_info())

        # Mapper instance 생성
        if config.source_dbms_type == config.target_dbms_type:
            src_mapper = MapperManager(src_conn).get_mappers()
            trg_mapper = src_mapper
        else:
            src_mapper = MapperManager(src_conn).get_mappers()
            trg_mapper = MapperManager(trg_conn).get_mappers()

        # Function instance 생성
        initializer = FuncsInitializer(src_conn=src_conn, src_mapper=src_mapper, trg_conn=trg_conn, trg_mapper=trg_mapper)

        print(view_runtime_config(destination, config.get_config(), args))

    else:
        destination = SOURCE

        mysql_key_option_check(destination)
        sa_unsupported_dbms_without_data_option_check(destination)

        # Connection instance 생성
        logger.debug("Create source connection instance")
        src_conn = ConnectionManager(config.get_src_conn_info())

        # Mapper instance 생성
        logger.debug("Create mapper instance")
        src_mapper = MapperManager(src_conn).get_mappers()

        # Function instance 생성
        initializer = FuncsInitializer(src_conn=src_conn, src_mapper=src_mapper)

        print(view_runtime_config(destination, config.get_config(), args))

    update_total_data, update_commit_unit, delete_total_data, delete_commit_unit = config.get_init_data_info().values()

    invalid_input_msg = f"{__file__}: warning: invalid input value. please enter \"y\" or \"n\".\n"
    operation_cancel_msg = f"\n{__file__}: warning: operation is canceled by user\n"

    def get_proceed_msg(operation):
        return f"Do you want to {operation} CDCBENCH related objects and data in the above database? [y/N]: "

    def get_selection(print_text):
        """
        사용자에게 안내 메시지를 출력하며, 진행 여부를 입력 받음
        :param print_text: 출력 메시지
        :return: True, False, None
        """
        if args.assumeyes:
            print(print_text)
            user_input = "Y"
        else:
            user_input = input(print_text)

        if len(user_input) == 0 or user_input is None:
            user_input = "N"

        user_input = user_input.strip().upper()

        if user_input == "Y":
            return True
        elif user_input == "N":
            return False
        else:
            return None

    if args.create:
        while True:
            select = get_selection(get_proceed_msg("create"))

            if select is True:
                print()
                start_time = time.time()

                if args.only_data:  # --only-data 옵션일 경우 데이터만 생성함
                    initializer.initializing_data(destination, UPDATE_TEST, update_total_data, update_commit_unit, args)
                    initializer.initializing_data(destination, DELETE_TEST, delete_total_data, delete_commit_unit, args)

                else:   # 아닐 경우 Table 생성 절차부터 시작
                    initializer.create(destination, args)

                    if not args.without_data:   # --without-data 옵션이 없을 경우 데이터를 생성함
                        initializer.initializing_data(destination, UPDATE_TEST, update_total_data, update_commit_unit, args)
                        initializer.initializing_data(destination, DELETE_TEST, delete_total_data, delete_commit_unit, args)

                end_time = time.time()
                print(f"  {get_elapsed_time_msg(end_time, start_time)}")
                break

            elif select is False:
                print(operation_cancel_msg)
                break

            else:
                print(invalid_input_msg)

    elif args.drop:
        while True:
            select = get_selection(get_proceed_msg("drop"))

            if select is True:
                print()
                start_time = time.time()

                initializer.drop(destination, args)

                end_time = time.time()
                print(f"  {get_elapsed_time_msg(end_time, start_time)}")
                break

            elif select is False:
                print(operation_cancel_msg)
                break

            else:
                print(invalid_input_msg)

    elif args.reset:
        while True:
            select = get_selection(get_proceed_msg("reset"))

            if select is True:
                print()
                start_time = time.time()

                initializer.drop(destination, args)
                initializer.create(destination, args)

                if not args.without_data:
                    initializer.initializing_data(destination, UPDATE_TEST, update_total_data, update_commit_unit, args)
                    initializer.initializing_data(destination, DELETE_TEST, delete_total_data, delete_commit_unit, args)

                end_time = time.time()
                print(f"  {get_elapsed_time_msg(end_time, start_time)}")
                break

            elif select is False:
                print(operation_cancel_msg)
                break

            else:
                print(invalid_input_msg)

except DatabaseError as dberr:
    exec_database_error(logger, config.log_level, dberr, fail_print=False)

except KeyboardInterrupt:
    print(f"\n{__file__}: warning: operation is canceled by user\n")
    exit(1)

finally:
    print()
    if logger is not None:
        logger.info(f"Module {__file__} is ended\n")

    if sql_logger is not None:
        sql_logger.info("\n")
